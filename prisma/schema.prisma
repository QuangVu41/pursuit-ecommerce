// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  admin
  user
}

enum BannerType {
  hero
  sale
}

enum OrderStatus {
  pending
  completed
}

enum VerificationTokenType {
  email
  passwordReset
  twoFactor
}

model User {
  id                    String             @id @default(cuid())
  name                  String?
  email                 String             @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole           @default(user)
  birthOfDate           DateTime?
  phoneNumber           String?
  accounts              Account[]
  createdAt             DateTime           @default(now())
  updatedAt             DateTime           @updatedAt
  isTwoFactorEnabled    Boolean            @default(false)
  products              Product[]
  productAttributes     ProductAttribute[]
  cart                  Cart?
  connectedAccountId    String?            @unique
  stripeConnectedLinked Boolean            @default(false)
  orders                Order[]
  reviews               Review[]

  @@map("users")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model VerificationToken {
  id      String                @id @default(cuid())
  email   String
  type    VerificationTokenType
  token   String                @unique
  expires DateTime

  @@unique([email, type])
  @@map("verification_tokens")
}

model Product {
  id              String           @id @default(cuid())
  name            String           @unique
  slug            String           @unique
  description     String
  summary         String
  regularPrice    Float
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  categoryId      String
  category        Category         @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  userId          String
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  productVariants ProductVariant[]
  productImages   ProductImage[]
  reviews         Review[]

  @@map("products")
}

model ProductVariant {
  id           String                 @id @default(cuid())
  productId    String
  product      Product                @relation(fields: [productId], references: [id], onDelete: Cascade)
  price        Float
  stock        Int
  imageUrl     String?
  altText      String?
  firstAttrId  String
  firstAttr    ProductAttributeValue  @relation("FirstAttr", fields: [firstAttrId], references: [id], onDelete: Cascade)
  secondAttrId String?
  secondAttr   ProductAttributeValue? @relation("SecondAttr", fields: [secondAttrId], references: [id], onDelete: Cascade)
  createdAt    DateTime               @default(now())
  updatedAt    DateTime               @updatedAt
  cartItems    CartItem[]
  orderItems   OrderItem[]

  @@unique([productId, firstAttrId, secondAttrId])
  @@map("product_variants")
}

model ProductImage {
  id        String   @id @default(cuid())
  imageUrl  String
  isPrimary Boolean  @default(false)
  altText   String
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("product_images")
}

model Cart {
  id        String     @id @default(cuid())
  userId    String     @unique
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  cartItems CartItem[]

  @@map("carts")
}

model CartItem {
  id               String         @id @default(cuid())
  cartId           String
  cart             Cart           @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productVariantId String
  productVariant   ProductVariant @relation(fields: [productVariantId], references: [id], onDelete: Cascade)
  quantity         Int
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  @@unique([cartId, productVariantId])
  @@map("cart_items")
}

model Order {
  id         String      @id @default(cuid())
  userId     String
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  total      Int
  status     OrderStatus @default(pending)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  orderItems OrderItem[]

  @@map("orders")
}

model OrderItem {
  id               String         @id @default(cuid())
  orderId          String
  order            Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productVariantId String
  productVariant   ProductVariant @relation(fields: [productVariantId], references: [id], onDelete: Cascade)
  quantity         Int
  total            Int
  platformFee      Int
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  @@unique([orderId, productVariantId])
  @@map("order_items")
}

model Category {
  id            String     @id @default(cuid())
  name          String     @unique
  description   String?
  parentId      String?
  parent        Category?  @relation("CategoryToSubcategory", fields: [parentId], references: [id], onDelete: SetNull)
  subcategories Category[] @relation("CategoryToSubcategory")
  imageUrl      String
  altText       String
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  products      Product[]

  @@map("categories")
}

model ProductAttribute {
  id                     String                  @id @default(cuid())
  name                   String
  productAttributeValues ProductAttributeValue[]
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  userId                 String
  user                   User                    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([name, userId])
  @@map("product_attributes")
}

model ProductAttributeValue {
  id                    String           @id @default(cuid())
  name                  String
  attribute             ProductAttribute @relation(fields: [attributeId], references: [id], onDelete: Cascade)
  attributeId           String
  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @updatedAt
  firstProductVariants  ProductVariant[] @relation("FirstAttr")
  secondProductVariants ProductVariant[] @relation("SecondAttr")

  @@unique([name, attributeId])
  @@map("product_attribute_values")
}

model Banner {
  id           String        @id @default(cuid())
  title        String
  description  String
  type         BannerType    @unique
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  bannerImages BannerImage[]

  @@map("banners")
}

model BannerImage {
  id        String   @id @default(cuid())
  imageUrl  String
  altText   String
  bannerId  String
  banner    Banner   @relation(fields: [bannerId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("banner_images")
}

model Review {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  rating    Int
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, productId])
  @@map("reviews")
}
